// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`field descriptions 1`] = `
{
  "aceMode": "Ace mode used when editing files which use the language. This must match
one of the names in https://gh.io/acemodes. Use "text" if no mode exists.",
  "aliases": "List of additional aliases (implicitly includes lowercased forms of language's name).
These are used in fenced code-blocks, code searches by language, and in overrides.",
  "codemirrorMimeType": "MIME media-type used by CodeMirror 5 for selecting a mode for editing the language.
The \`mime\` types supported by the named mode are listed here: https://git.io/f4SoQ",
  "codemirrorMode": "CodeMirror 5 mode used when editing files that use the language.
This must match one of the names listed here: https://git.io/vi9Fx",
  "color": "CSS colour code used to represent the language (format: "#RRGGBB").",
  "extensions": "List of associated file extensions, sorted in ascending ASCII order,
except for the language's primary extension, which is always listed first.",
  "filenames": "List of associated filenames, sorted in ascending ASCII order.
May be omitted if the extensions field is present (and vice versa).",
  "group": "Name of the parent language. Languages in a group contribute to the usage statistics
of their parent language.",
  "interpreters": "List of programs that execute the language (by running and/or compiling it).
These are consulted when scrutinising a file's hashbang to determine its language.",
  "languageId": "Unique identifier used internally by GitHub, generated by running
\`script/update-ids\`. Do not fill out this field manually.",
  "name": "Language name.",
  "tmScope": "The TextMate scope that represents this programming language.
This should match one of the scopes listed in grammars.yml.
Use "none" if there is no TextMate grammar for this language.",
  "type": "Either "data", "programming", "markup" or "prose".",
  "wrap": "Enable soft line-wrapping (default: false)",
}
`;

exports[`generateFiles > data/F_2a_.d.mts 1`] = `
declare const _: {
  "name": "F*",
  "type": "programming",
  "color": "#572e30",
  "extensions": [
    ".fst"
  ],
  "tmScope": "source.fstar",
  "aceMode": "text",
  "languageId": 336943375,
  "aliases": [
    "fstar"
  ]
}
export default _
`;

exports[`generateFiles > data/F_2a_.d.ts 1`] = `
declare const _: {
  "name": "F*",
  "type": "programming",
  "color": "#572e30",
  "extensions": [
    ".fst"
  ],
  "tmScope": "source.fstar",
  "aceMode": "text",
  "languageId": 336943375,
  "aliases": [
    "fstar"
  ]
}
export = _
`;

exports[`generateFiles > data/F_2a_.js 1`] = `
module.exports = {
  "name": "F*",
  "type": "programming",
  "color": "#572e30",
  "extensions": [
    ".fst"
  ],
  "tmScope": "source.fstar",
  "aceMode": "text",
  "languageId": 336943375,
  "aliases": [
    "fstar"
  ]
}
`;

exports[`generateFiles > data/F_2a_.mjs 1`] = `
export default {
  "name": "F*",
  "type": "programming",
  "color": "#572e30",
  "extensions": [
    ".fst"
  ],
  "tmScope": "source.fstar",
  "aceMode": "text",
  "languageId": 336943375,
  "aliases": [
    "fstar"
  ]
}
`;

exports[`generateFiles > data/Test_20_Test_20_2.d.mts 1`] = `
declare const _: {
  "name": "Test Test 2",
  "type": "programming",
  "color": "#E8274B",
  "extensions": [
    ".abap"
  ],
  "aceMode": "abap",
  "languageId": 1,
  "wrap": true
}
export default _
`;

exports[`generateFiles > data/Test_20_Test_20_2.d.ts 1`] = `
declare const _: {
  "name": "Test Test 2",
  "type": "programming",
  "color": "#E8274B",
  "extensions": [
    ".abap"
  ],
  "aceMode": "abap",
  "languageId": 1,
  "wrap": true
}
export = _
`;

exports[`generateFiles > data/Test_20_Test_20_2.js 1`] = `
module.exports = {
  "name": "Test Test 2",
  "type": "programming",
  "color": "#E8274B",
  "extensions": [
    ".abap"
  ],
  "aceMode": "abap",
  "languageId": 1,
  "wrap": true
}
`;

exports[`generateFiles > data/Test_20_Test_20_2.mjs 1`] = `
export default {
  "name": "Test Test 2",
  "type": "programming",
  "color": "#E8274B",
  "extensions": [
    ".abap"
  ],
  "aceMode": "abap",
  "languageId": 1,
  "wrap": true
}
`;

exports[`generateFiles > data/Test1.d.mts 1`] = `
declare const _: {
  "name": "Test1",
  "type": "programming",
  "color": "#814CCC",
  "extensions": [
    ".bsl",
    ".os"
  ],
  "tmScope": "source.bsl",
  "aceMode": "text",
  "languageId": 0,
  "aliases": [
    "hello"
  ]
}
export default _
`;

exports[`generateFiles > data/Test1.d.ts 1`] = `
declare const _: {
  "name": "Test1",
  "type": "programming",
  "color": "#814CCC",
  "extensions": [
    ".bsl",
    ".os"
  ],
  "tmScope": "source.bsl",
  "aceMode": "text",
  "languageId": 0,
  "aliases": [
    "hello"
  ]
}
export = _
`;

exports[`generateFiles > data/Test1.js 1`] = `
module.exports = {
  "name": "Test1",
  "type": "programming",
  "color": "#814CCC",
  "extensions": [
    ".bsl",
    ".os"
  ],
  "tmScope": "source.bsl",
  "aceMode": "text",
  "languageId": 0,
  "aliases": [
    "hello"
  ]
}
`;

exports[`generateFiles > data/Test1.mjs 1`] = `
export default {
  "name": "Test1",
  "type": "programming",
  "color": "#814CCC",
  "extensions": [
    ".bsl",
    ".os"
  ],
  "tmScope": "source.bsl",
  "aceMode": "text",
  "languageId": 0,
  "aliases": [
    "hello"
  ]
}
`;

exports[`generateFiles > lib/index.d.mts 1`] = `
export type LanguageName = "Test1"
| "Test Test 2"
| "F*";

export interface Language {
  /**
* Language name.
*/
readonly name: string;
/**
* Either "data", "programming", "markup" or "prose".
*/
readonly type: string;
/**
* CSS colour code used to represent the language (format: "#RRGGBB").
*/
readonly color?: string;
/**
* List of associated file extensions, sorted in ascending ASCII order,
* except for the language's primary extension, which is always listed first.
*/
readonly extensions: readonly (string)[];
/**
* The TextMate scope that represents this programming language.
* This should match one of the scopes listed in grammars.yml.
* Use "none" if there is no TextMate grammar for this language.
*/
readonly tmScope?: string;
/**
* Ace mode used when editing files which use the language. This must match
* one of the names in https://gh.io/acemodes. Use "text" if no mode exists.
*/
readonly aceMode: string;
/**
* Unique identifier used internally by GitHub, generated by running
* \`script/update-ids\`. Do not fill out this field manually.
*/
readonly languageId: number;
/**
* List of additional aliases (implicitly includes lowercased forms of language's name).
* These are used in fenced code-blocks, code searches by language, and in overrides.
*/
readonly aliases?: readonly (string)[];
/**
* CodeMirror 5 mode used when editing files that use the language.
* This must match one of the names listed here: https://git.io/vi9Fx
*/
readonly codemirrorMode?: undefined;
/**
* MIME media-type used by CodeMirror 5 for selecting a mode for editing the language.
* The \`mime\` types supported by the named mode are listed here: https://git.io/f4SoQ
*/
readonly codemirrorMimeType?: undefined;
/**
* List of programs that execute the language (by running and/or compiling it).
* These are consulted when scrutinising a file's hashbang to determine its language.
*/
readonly interpreters?: undefined;
/**
* Name of the parent language. Languages in a group contribute to the usage statistics
* of their parent language.
*/
readonly group?: undefined;
/**
* List of associated filenames, sorted in ascending ASCII order.
* May be omitted if the extensions field is present (and vice versa).
*/
readonly filenames?: undefined;
/**
* Enable soft line-wrapping (default: false)
*/
readonly wrap?: boolean;
};

export {
  default as "Test1",
} from "../data/Test1.mjs";
export {
  default as "Test Test 2",
} from "../data/Test_20_Test_20_2.mjs";
export {
  default as "F*",
} from "../data/F_2a_.mjs";
`;

exports[`generateFiles > lib/index.d.ts 1`] = `
type LanguageName = "Test1"
| "Test Test 2"
| "F*";

declare const LinguistLanguages: Record<LanguageName, LinguistLanguages.Language>;

declare namespace LinguistLanguages {
  interface Language {
  /**
* Language name.
*/
readonly name: string;
/**
* Either "data", "programming", "markup" or "prose".
*/
readonly type: string;
/**
* CSS colour code used to represent the language (format: "#RRGGBB").
*/
readonly color?: string;
/**
* List of associated file extensions, sorted in ascending ASCII order,
* except for the language's primary extension, which is always listed first.
*/
readonly extensions: readonly (string)[];
/**
* The TextMate scope that represents this programming language.
* This should match one of the scopes listed in grammars.yml.
* Use "none" if there is no TextMate grammar for this language.
*/
readonly tmScope?: string;
/**
* Ace mode used when editing files which use the language. This must match
* one of the names in https://gh.io/acemodes. Use "text" if no mode exists.
*/
readonly aceMode: string;
/**
* Unique identifier used internally by GitHub, generated by running
* \`script/update-ids\`. Do not fill out this field manually.
*/
readonly languageId: number;
/**
* List of additional aliases (implicitly includes lowercased forms of language's name).
* These are used in fenced code-blocks, code searches by language, and in overrides.
*/
readonly aliases?: readonly (string)[];
/**
* CodeMirror 5 mode used when editing files that use the language.
* This must match one of the names listed here: https://git.io/vi9Fx
*/
readonly codemirrorMode?: undefined;
/**
* MIME media-type used by CodeMirror 5 for selecting a mode for editing the language.
* The \`mime\` types supported by the named mode are listed here: https://git.io/f4SoQ
*/
readonly codemirrorMimeType?: undefined;
/**
* List of programs that execute the language (by running and/or compiling it).
* These are consulted when scrutinising a file's hashbang to determine its language.
*/
readonly interpreters?: undefined;
/**
* Name of the parent language. Languages in a group contribute to the usage statistics
* of their parent language.
*/
readonly group?: undefined;
/**
* List of associated filenames, sorted in ascending ASCII order.
* May be omitted if the extensions field is present (and vice versa).
*/
readonly filenames?: undefined;
/**
* Enable soft line-wrapping (default: false)
*/
readonly wrap?: boolean;
}
}

export = LinguistLanguages;
`;

exports[`generateFiles > lib/index.js 1`] = `
module.exports = {
  "Test1": require("../data/Test1"),
"Test Test 2": require("../data/Test_20_Test_20_2"),
"F*": require("../data/F_2a_")
};
`;

exports[`generateFiles > lib/index.mjs 1`] = `
export {
  default as "Test1"
} from "../data/Test1.mjs";
export {
  default as "Test Test 2"
} from "../data/Test_20_Test_20_2.mjs";
export {
  default as "F*"
} from "../data/F_2a_.mjs";
`;
